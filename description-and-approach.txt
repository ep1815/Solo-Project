Users: people who want to play a fun game and test their memory

Problems: Creating a Simon [non-trademarked] color matching/memory game. I want to use this opportunity to solidify my understanding of how to coordinate frontend and backend,
sending information from one to the other, storing information for future use and comparison to inputted data, etc.

Solutions: use react and redux to create components for each of the color buttons and make them interactive, have the buttons light up in random orders, promp the user to repeat
the order, store the order in state to compare to the input by the player and know if the player is inputting it correctly, know when the player has finished a round and
add another button press to the end of the order for the next round and keep going, and a fail state when the player gets it wrong

MVP: a game that does all of the above with a fully-interactive frontend interface with four colors that light up and play a note both when demonstrating and when clicked

Technical challenges: getting the game to randomly generate a sequence of colors one at a time, and getting it to know when to move forward only after the player has fully
entered the sequence, will be a challenge. And getting that sequence to reset when the game is over and start fresh from square one will also be a difficulty. Becuase I'll
be building it all from scratch I expect just getting all the elements to interact with and respond to each other to be a difficulty.

Stretch goals: creating a landing page that gives the player some more options, such as difficulty (making the colors flash faster, or making it 6/8/whatever colors instead of 4),
colorblind mode which replaces the colors with some other identifier (e.g. the squares are numbered 1-4), and a leaderboard that allows the player to store their high score 
along with their name to compare to other players--really want to get to this because it will give me a chance to work with databases as well which I've had some 
difficulty with in the past.


Approach:

1. [FINISHED] Build out the basic (BASIC) layout in index.html. Just four squares (don't even have to be in a grid, can just be a line for now) with four colors, a header and a footer
2. [FINISHED] Turn those squares into react components that interact with each other, see below for heirarchy
            App
             |
             v
            Box
             |
             v
           Square
Body contains four squares, one with each associated color and sound.
3. [FINISHED] Build out interactivity for these squares. SEQUENCE (the order in which the squares flash) is most important part of state, an array
that is iterated through on each round. Sequence should be empty when game starts, and have a randomizer that pushes a random square's value into the array at the start of each
round, then iterates through the array and lights up the corresponding square for a certain amount of time (e.g. 1 second) then goes on to the next one. It should know when the 
iteration is done then promp the player to repeat the sequence.
4. [CURRENTLY WORKING ON] As the player repeats the sequence, each input should store in state a separate array, PLAYERSEQUENCE, that is pushed each inputted square by the player. Upon each pushed square,
the game should compare the pushed square to the square at the same index in SEQUENCE to ensure that they are identical. If so, it allows the player to continue, and if not,
it should alert the player that they made a mistake and end the game. After the player successfully completes each round, the PLAYERSEQUENCE array in state should automatically be
emptied, a new random square pushed to the end of SEQUENCE, and the sequence played out on the front end again.
5. [DONE] Upon failure, the player should be prompted to press the RESET button to set state back to empty.
6. Prettify the formatting a bit.
7. Extensions if you can get to it (FIRST PRIORITY: the leaderboard).

WHAT TO DO TOMORROW (WEDNESDAY 29 DEC):
- [DONE] Get a better understanding of what the <Provider> does in index.js, along with reducercombiner and store, you rushed through that copy-pasting from the redux unit and you need 
to understand what those are doing before moving forward
- [DONE] Build out the boxesReducer, set different SWITCH cases for each squareID possibility - these can be copy-pasted to a large extent once you get the first done; have it push
the input squareID to the playerSequence array, and compare the array at index (which should increment by 1 each time a button is clicked) to sequence array at same index, if not
they should fail, if so they should continue; if index reaches sequence.length, then reset index to zero and reset playerSequence to empty array, then add another 
- [DONE] Create a second reducer, sequenceReducer, which pushes a new random squareID to the sequence array (a) when the game starts and (b) when the player successfully enters the entire
sequence, and which iterates through the array and triggers the corresponding square to light up for a certain amount of time 
- [DONE] Create third reducer for reset button, which resets score to zero, playersequence to empty, and sequence to empty


PRESENTATION:
- Introduction: This is my Generic Non-Trademarked Color Matching Memory Game, any resemblance to any existing game is totally coincidental. Styling is pretty barebones,
which is fine because the main thing I wanted out of this project was to solidify my skills in react-redux, particularly in understanding how to position and render React components
in the DOM, and that beautiful almighty flow chart of Component -> Action Creator -> Reducer -> Store -> back to Component. In that respect I think I did quite well as I got
it all to interact with each other the way I wanted. Take a look:

- Demonstration: go through to round 4 or 5, explaining how the game works, on clicking start it shows you a pattern and prompts you to repeat it. Show off the score-keeper
(stores your score in STORE and increments on each completed round), explain how you keep two arrays in STATE which store a sequence of colors: 
the PATTERN which is iterated through at the start of each round to show you the pattern to follow, 
and the PLAYERPATTERN which is empty at the start of each round and is filled up with each click on the squares, and compared to the PATTERN to make sure you're doing it right.
When the PLAYERPATTERN is fully filled up and completely matches the existing PATTERN, it clears out the PLAYERPATTERN, increments the score, pushes a random new squareID onto the
end of the PATTERN, and runs through the PATTERN again, starting a new round. 
When you get it wrong [DEMONSTRATE] it compares the two, sees something is off, and prompts a fail state.

- Technical Challenge: getting the pattern to show up was a pain, I iterate through the PATTERN array that's stored in state, and for each element (representing a squareID)
take the corresponding id to manipulate its stylings in the DOM to change its background and border colors, then have a setTimeout that changes them back after a certain amount
of time, then moving on to the next squareID. Same process of DOM manipulation used for changing color onClick. Another problem was getting the pattern to trigger after a round
is completed